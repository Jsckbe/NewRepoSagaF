<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        YFGW7F29x9vLiwiDYvWDwLEx1qmIBIuyZO/qFHs53nfVN9T08TjbZli/BIuyZO/OHd3dNbWjpzX6hJdt
        M6xfgkVZsnf1JfkczDuDby/MI8GiLNm79/2ju2tqZ8pH+PbCPBIsypK9uyrD+6/rVvFthfkkWJQle/eJ
        R7u7plYWz+fbCvNJsChL9u7GJ7q7plb0xxbYtsJ8EizKkr2bY1ptnYuFbSvMJ8GiLNm7OYhpVspLsChL
        9m4OoujLS7AoS/ZuDqLoy0uwKEv2bg6i6MtLsChL9m4OoujLS7AoS/ZuDqLoy0uwKEv2bg6i6MtLsChL
        9m4OoujLS7AoS/ZuDqLoy0uwKEv2bg6i6MtLsChL9m4OoujLS7AoS/ZuDtatBJYtLOf4/fixeZJgUZbs
        3SYw8UB+bJ4kWJQle7cJRNGnjqhiUZbs3SYQRZ86oopFWbJ3m0AUfeqIKhZlyd5tAlH0qSOqWJQle7cJ
        RNGnjqhiUZbs3SYQRZ86oopFWbJ3m0AUfeqIKhZlyd5tAlH0qSOqWJQle7cJRNGnjqhiUZbs3SYQRZ86
        oopFWbJ3m0AUfeqIKhZlyd5tAlH0qSOqWJQle7cJRNGnjqhiUZbs3SYQRZ86oopFWbJ3m0AUfeqIKhZl
        yd5tAlH0qSOqWJQle7cJRNGnjqhiUZbs3SYQRZ86oopFWbJ3c7B2BbDkxnKO35cfmycJFmXJ3s3BTTOB
        MXuWc9hO/Ng8SbAoS/ZuDmIKkPISLMqSvZuDKPryEizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPry
        EizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPryEizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPry
        EizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPryEizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPry
        EizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPryEizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPry
        EizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPryEizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPry
        EizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPryEizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPry
        EizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPryEizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPry
        EizKkr2bgyj68hIsypK9m4Mo+vISLMqSvZuDKPryEizKkr2bgyj68hIsypK9m4Mo+vISLHr4TnwFz+Yg
        ir6shz8rdXwVWSKM3pOv5NkcRNGX9YjdUsdXkSXCuH34Sp7NQRR9WY9+eer4KrJEOPEgvpJncxBFX9bj
        9k4dX0WWCGd8gq/k2RzMO51vK8zjxANTx1eRJcK5h/KVPJuDv0zk2wrzeMr7UsdXkSXCdVP5Sp7NwSXD
        +bbCPM78eur4KrJEWHYbX8mzOTjzM3xbYR7/PCp1fBVZImzZBIzYla/o1bp5ci0w6e18W2H96rOneWek
        zq8iSxMnxAdSsW4eWggc+xq+rbB+j9wNuP3i1PlVZGnijz/hK3u1bhacB4x8Lt9WWL9jXwEsXZA6v4os
        Tdw5V5KfuePKXq2b2Yfx7YR51NuVm9alzq8iSxPL7wKOeSVvwKN1otdMEw7g2wnzeOEPU+fviCxNrFsJ
        nP5R3oBH6+SGGXJhFf9Fi3rXFanzd0SWPkUX8Ke4j/x/62LDY3JR9QK+jTCPY/YCtm5JH8COSMY23H0V
        b8SjdaCnNZcfw9sP83npEekD4EjGNuiHpIN0WEPerINH7pHrpFfx9sM8HvF8YPH16QPgSNZ2XBuDorod
        LOtXyzXSx3jbYT5PeT/w+PL0IXAkazv0HFTvcbIGPTkYtOD/8F3ebphXPbXp2po+CI5kES4ZKQ04v9sw
        UPQU8eJh9qoaazfM57BnAyvklLIPJJPwwA321glr2IsDYfUS+Yb/XhT8UDnnyPRB9I5kErZuBs7+Jm/Y
        i62i3zAnH8zbCvM77nU2qK8fSHYPLF8EjHox34AH+8vjDwPzpwKj9+DthPnV05orx8uH0WWfSR/IGr1w
        9WRp0On0IH2xZSNwyznArz4ADN+ZtxGWccIbgVWL0wfTN7JGL6xdDpz6Qb6hpsvQ076NT8g1zz+BKR/i
        64Vl1XHzOoK1BWStPrhtNt9Y09WLUvW//wIWXQZcOwU4//vApLfx/HBonPVtKdL+ndY8hazVB/rtdpHD
        YbE64lTVcRxHvdDOG1leOHTq8OF+3KLcHlmzH3TJX5Keu8Z4+7Bd1C+h66enAm0NWbuf3HdN3LsP28c5
        RwGbN6bibA1ZuwWuOTX+zYdDrJxtTP1kn0MNekNaaQE9zblynL10S3coDDM7+T3Aw3ekghwY0kqLbNrg
        88I2HHp//npg1QOpEAeOtDQA9F71jEPioUxYzuPf0OPsBq0irQ0QLXydNiQKP8ztsa8F7p83qPP4bZEW
        B4E+itcHNl6HKoSZlYtWHWKwflUquHqQlgfJls12cTtqd7LTYTgIT/uwzQxXM9JyDeiLE3fMAUY+j+98
        GLbi8OcAl4ywaWkyIFuokceWAdM+B4zYhR9MGPaqnM6M3w+4/iwb/pIJ2VLN6F/nvF8DY2O2tLAF9YbI
        rG+le/CtDSBrFdlaJnRY8lmfj7s7Ye/qq5U6vGXhhVI0eYv9KWSrGdm8Abh5FjDlI3aexg469KvOCXTp
        SBvCXRDZcgF0Sgy90D3xHfzgQ1/qhExzRwNrHrSbIIWRPSiIfvPfMN1+AEvn1olZA/yo47V+8RZg9o9b
        erUvB7I3Q4C+ta7TjOhPTJ7xcfnLj1udjVWnKNdhwIsut3EzXT1PrFoK2as2QGcUuOY0m0JDZ/jVi9/4
        L9B56rBzfVajF6b6jb70lvQBtxeyp22Ejq149D7glnPtKa8OcZj2WeCkg+z3mrpf3dvdfsYm5nsvr34Z
        6ZeSTneit6R1iIDepDj7G3ZBqvOgLp4/JOfprSBHEgS+iKIP3BFFH7gjij5wRxR94Azgf4eIUXF0xVDT
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>